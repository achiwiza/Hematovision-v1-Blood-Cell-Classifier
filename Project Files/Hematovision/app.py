import webbrowser
from tensorflow.keras.models import Model
from tensorflow.keras.applications import VGG16
from tensorflow.keras.layers import Flatten, Dense, Dropout
from keras.models import Sequential
from keras.layers import RandomFlip, RandomRotation, RandomZoom, RandomContrast
import threading

base = VGG16(weights=None, include_top=False, input_shape=(224, 224, 3))
x = Flatten()(base.output)
x = Dense(512, activation='relu')(x)
x = Dropout(0.5)(x)
output = Dense(8, activation='softmax')(x)

model = Model(inputs=base.input, outputs=output)
model.load_weights("hematovision_vgg16.h5")
model.trainable = False



# ‚úÖ In-app augmenter
augmenter = Sequential([
    RandomFlip("horizontal"),
    RandomRotation(0.2),
    RandomZoom(0.2),
    RandomContrast(0.1)
])
augmenter.trainable = False

# ‚úÖ Original 8 class labels (no 'other')
class_names = [
    'basophil', 'eosinophil', 'erythroblast', 'ig',
    'lymphocyte', 'monocyte', 'neutrophil', 'platelet'
]
from flask import Flask
app = Flask(__name__)
app.secret_key = "your_secret_key_here"

@app.route("/")
def home():
    return render_template("welcome.html")

@app.route("/predict", methods=["GET", "POST"])
def predict():
    if request.method == "GET":
        return render_template("index.html")

    if "file" not in request.files or request.files["file"].filename == "":
        flash("‚ö†Ô∏è No file uploaded.")
        return redirect(url_for("predict"))

    try:
        img_file = request.files["file"]
        path = os.path.join("static/uploads", img_file.filename)
        img_file.save(path)

        # ‚úÖ Preprocess input
        img = Image.open(path).convert("RGB").resize((224, 224))
        np_img = np.array(img)
        tf_img = tf.image.convert_image_dtype(np_img, tf.float32)
        tf_img = tf.expand_dims(tf_img, axis=0)
        aug_img = augmenter(tf_img, training=True)

        prediction = model.predict(aug_img)
        top_indices = prediction[0].argsort()[-3:][::-1]
        top_predictions = [(class_names[i], float(prediction[0][i])) for i in top_indices]
        top_confidence = prediction[0][top_indices[0]]

        print("\nüî¨ Prediction Scores:")
        for label, conf in zip(class_names, prediction[0]):
            print(f"{label:<12}: {conf:.4f}")
        print()

        if top_confidence < 0.30:
            flash("‚ö†Ô∏è Model is uncertain. These predictions may be inaccurate.")

        session["latest_predictions"] = top_predictions
        session["filename"] = img_file.filename

        return render_template("index.html",
                               prediction=top_predictions,
                               filename=img_file.filename)

    except Exception as e:
        flash(f"‚ùå Prediction error: {str(e)}")
        return redirect(url_for("predict"))

@app.route("/download-report", methods=["POST"])
def download_report():
    filename = session.get("filename", "unknown_image")
    predictions = session.get("latest_predictions", [])

    pdf = FPDF()
    pdf.add_page()
    pdf.image("static/logo.png", x=10, y=8, w=25)
    pdf.set_xy(40, 10)
    pdf.set_font("Arial", 'B', 18)
    pdf.cell(0, 10, "HematoVision Blood Cell Report", ln=True)

    pdf.set_font("Arial", size=12)
    pdf.ln(10)
    pdf.cell(0, 10, f"Analyzed Image: {filename}", ln=True)
    pdf.ln(5)

    pdf.set_fill_color(230, 230, 250)
    pdf.set_font("Arial", 'B', 12)
    pdf.cell(0, 10, "Prediction Breakdown", ln=True, fill=True)

    pdf.set_font("Arial", '', 11)
    for label, confidence in predictions:
        percent = f"{confidence * 100:.2f}%"
        bar_width = int(confidence * 100)
        pdf.set_fill_color(255, 255, 255)
        pdf.set_text_color(0)
        pdf.cell(40, 8, label.capitalize(), border=1)
        pdf.cell(25, 8, percent, border=1)
        pdf.set_fill_color(100, 180, 255)
        pdf.cell(bar_width, 8, "", border=1, fill=True)
        pdf.ln(8)

    pdf.ln(10)
    pdf.set_font("Arial", 'I', 10)
    pdf.set_text_color(100)
    pdf.cell(0, 10, "Generated by HematoVision - Powered by AI for Hematology Insight", ln=True)
    pdf.cell(0, 10, "Model Version: HematoVision VGG16 Legacy", ln=True)
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    pdf.cell(0, 10, f"Generated on: {now}", ln=True)

    response = make_response(pdf.output(dest="S").encode("latin-1"))
    response.headers["Content-Disposition"] = "attachment; filename=hematovision_report.pdf"
    response.headers["Content-Type"] = "application/pdf"
    return response

def open_browser():
    webbrowser.open_new("http://127.0.0.1:5000/")

if __name__ == "__main__":
    print("üöÄ Launching HematoVision Flask app...")
    threading.Timer(1.5, open_browser).start()
    app.run(debug=True)
